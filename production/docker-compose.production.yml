# Docker Compose file for TRADEAI Production Deployment

services:
  # MongoDB Database
  trade-ai-mongodb:
    image: mongo:7.0
    container_name: trade-ai-mongodb-prod
    restart: unless-stopped
    environment:
      MONGO_INITDB_ROOT_USERNAME: tradeai_admin
      MONGO_INITDB_ROOT_PASSWORD: ${MONGO_PASSWORD}
      MONGO_INITDB_DATABASE: trade_ai_production
    volumes:
      - mongodb_data:/data/db
      - mongodb_config:/data/configdb
      - ./seed-production-data.js:/docker-entrypoint-initdb.d/seed-production-data.js:ro
      - ./logs/mongodb:/var/log/mongodb
    ports:
      - "27017:27017"
    networks:
      - trade-ai-network
    command: mongod --auth --logpath /var/log/mongodb/mongod.log --logappend
    healthcheck:
      test: ["CMD", "mongosh", "--eval", "db.adminCommand('ping')"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # Redis Cache
  trade-ai-redis:
    image: redis:7.2-alpine
    container_name: trade-ai-redis-prod
    restart: unless-stopped
    command: redis-server --requirepass ${REDIS_PASSWORD} --appendonly yes --appendfsync everysec
    volumes:
      - redis_data:/data
      - ./logs/redis:/var/log/redis
    ports:
      - "6379:6379"
    networks:
      - trade-ai-network
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Backend API
  trade-ai-backend:
    build:
      context: ../backend
      dockerfile: Dockerfile.production
    container_name: trade-ai-backend-prod
    restart: unless-stopped
    env_file:
      - .env.production
    environment:
      NODE_ENV: production
      MONGODB_URI: mongodb://tradeai_admin:${MONGO_PASSWORD}@trade-ai-mongodb:27017/trade_ai_production?authSource=admin
      REDIS_HOST: trade-ai-redis
      REDIS_PASSWORD: ${REDIS_PASSWORD}
    volumes:
      - backend_uploads:/app/uploads
      - backend_temp:/app/temp
      - ./logs/backend:/app/logs
    ports:
      - "5000:5000"
    networks:
      - trade-ai-network
    depends_on:
      trade-ai-mongodb:
        condition: service_healthy
      trade-ai-redis:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:5000/api/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s

  # Frontend
  trade-ai-frontend:
    build:
      context: ../frontend
      dockerfile: Dockerfile.production
      args:
        REACT_APP_API_URL: ${REACT_APP_API_URL}
        REACT_APP_ENVIRONMENT: production
    container_name: trade-ai-frontend-prod
    restart: unless-stopped
    volumes:
      - ./logs/frontend:/var/log/nginx
    ports:
      - "3000:80"
    networks:
      - trade-ai-network
    depends_on:
      trade-ai-backend:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:80/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # AI Services
  trade-ai-ai-services:
    build:
      context: ../ai-services
      dockerfile: Dockerfile.production
    container_name: trade-ai-ai-services-prod
    restart: unless-stopped
    environment:
      ENVIRONMENT: production
      AI_MODEL_API_KEY: ${AI_MODEL_API_KEY}
      REDIS_HOST: trade-ai-redis
      REDIS_PASSWORD: ${REDIS_PASSWORD}
    volumes:
      - ai_models:/app/models
      - ./logs/ai-services:/app/logs
    ports:
      - "8000:8000"
    networks:
      - trade-ai-network
    depends_on:
      trade-ai-redis:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 60s
      timeout: 15s
      retries: 3

  # Monitoring Service
  trade-ai-monitoring:
    build:
      context: ../monitoring
      dockerfile: Dockerfile.production
    container_name: trade-ai-monitoring-prod
    restart: unless-stopped
    environment:
      ENVIRONMENT: production
      RETENTION_DAYS: ${RETENTION_DAYS}
      MONGODB_URI: mongodb://tradeai_admin:${MONGO_PASSWORD}@trade-ai-mongodb:27017/trade_ai_production?authSource=admin
      REDIS_HOST: trade-ai-redis
      REDIS_PASSWORD: ${REDIS_PASSWORD}
    volumes:
      - monitoring_data:/app/data
      - ./logs/monitoring:/app/logs
    ports:
      - "8080:8080"
    networks:
      - trade-ai-network
    depends_on:
      trade-ai-mongodb:
        condition: service_healthy
      trade-ai-redis:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/health"]
      interval: 60s
      timeout: 15s
      retries: 3

  # Nginx Reverse Proxy
  trade-ai-nginx:
    build:
      context: ../nginx
      dockerfile: Dockerfile.production
    container_name: trade-ai-nginx-prod
    restart: unless-stopped
    volumes:
      - ./ssl:/etc/nginx/ssl:ro
      - ./logs/nginx:/var/log/nginx
      - nginx_cache:/var/cache/nginx
    ports:
      - "80:80"
      - "443:443"
    networks:
      - trade-ai-network
    depends_on:
      - trade-ai-frontend
      - trade-ai-backend
      - trade-ai-ai-services
      - trade-ai-monitoring
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:80/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Log Aggregator (Optional - for centralized logging)
  trade-ai-logs:
    image: fluent/fluent-bit:2.2
    container_name: trade-ai-logs-prod
    restart: unless-stopped
    volumes:
      - ./fluent-bit.conf:/fluent-bit/etc/fluent-bit.conf:ro
      - ./logs:/var/log/trade-ai:ro
      - logs_data:/var/log/fluent-bit
    networks:
      - trade-ai-network
    depends_on:
      - trade-ai-backend
      - trade-ai-frontend

volumes:
  mongodb_data:
    driver: local
  mongodb_config:
    driver: local
  redis_data:
    driver: local
  backend_uploads:
    driver: local
  backend_temp:
    driver: local
  ai_models:
    driver: local
  monitoring_data:
    driver: local
  nginx_cache:
    driver: local
  logs_data:
    driver: local

networks:
  trade-ai-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16