# Build stage
FROM node:18-alpine AS builder

WORKDIR /app

# Copy package files
COPY package*.json ./

# Configure npm for better reliability
RUN npm config set fetch-retry-mintimeout 20000 && \
    npm config set fetch-retry-maxtimeout 120000 && \
    npm config set fetch-retries 5 && \
    npm config set network-timeout 300000 && \
    npm config set registry https://registry.npmjs.org/

# Clean install dependencies
RUN npm ci --legacy-peer-deps --force

# Copy source code
COPY . .

# Set build arguments
ARG REACT_APP_API_URL=http://localhost:5000/api
ARG REACT_APP_SOCKET_URL=ws://localhost:5000
ARG REACT_APP_AI_API_URL=http://localhost:8000
ARG REACT_APP_MONITORING_URL=http://localhost:8080

# Create environment variables for build
ENV REACT_APP_API_URL=$REACT_APP_API_URL
ENV REACT_APP_SOCKET_URL=$REACT_APP_SOCKET_URL
ENV REACT_APP_AI_API_URL=$REACT_APP_AI_API_URL
ENV REACT_APP_MONITORING_URL=$REACT_APP_MONITORING_URL

# Create a dummy health.json file for the health check
RUN echo '{"status":"UP"}' > public/health.json

# Build the application using react-scripts directly
RUN CI=false GENERATE_SOURCEMAP=false npm run build:react

# Verify build was successful
RUN ls -la build/ && test -f build/index.html

# Production stage
FROM nginx:alpine

# Copy nginx configuration
COPY nginx/nginx.conf /etc/nginx/conf.d/default.conf

# Copy built files from builder stage
COPY --from=builder /app/build /usr/share/nginx/html

# Expose port
EXPOSE 80

# Health check
HEALTHCHECK --interval=30s --timeout=3s --start-period=10s --retries=3 \
  CMD wget --no-verbose --tries=1 --spider http://localhost:80/health.json || exit 1

# Start nginx
CMD ["nginx", "-g", "daemon off;"]