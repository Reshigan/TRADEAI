version: '3.8'

services:
  # MongoDB with Production Configuration
  mongodb:
    image: mongo:7.0
    container_name: trade-ai-mongodb-aws-prod
    restart: always
    ports:
      - "127.0.0.1:27017:27017"
    environment:
      MONGO_INITDB_ROOT_USERNAME: ${MONGO_USERNAME}
      MONGO_INITDB_ROOT_PASSWORD: ${MONGO_PASSWORD}
      MONGO_INITDB_DATABASE: ${MONGO_DATABASE}
    volumes:
      - mongodb_data:/data/db
      - mongodb_config:/data/configdb
      - ./docker/mongo-init-production.js:/docker-entrypoint-initdb.d/mongo-init-production.js:ro
    networks:
      - trade-ai-network
    healthcheck:
      test: echo 'db.runCommand("ping").ok' | mongosh mongodb://${MONGO_USERNAME}:${MONGO_PASSWORD}@localhost:27017/admin --quiet
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "5"

  # Redis with Production Configuration
  redis:
    image: redis:7-alpine
    container_name: trade-ai-redis-aws-prod
    restart: always
    ports:
      - "127.0.0.1:6379:6379"
    command: redis-server --appendonly yes --requirepass ${REDIS_PASSWORD} --maxmemory 1gb --maxmemory-policy allkeys-lru
    volumes:
      - redis_data:/data
    networks:
      - trade-ai-network
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "5"

  # Backend API Service
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile.production
      args:
        NODE_ENV: production
        BUILD_DATE: ${BUILD_DATE}
        VERSION: ${VERSION}
    container_name: trade-ai-backend-aws-prod
    restart: always
    ports:
      - "127.0.0.1:5001:5000"
    environment:
      NODE_ENV: production
      PORT: 5000
      MONGODB_URI: mongodb://${MONGO_USERNAME}:${MONGO_PASSWORD}@mongodb:27017/${MONGO_DATABASE}?authSource=admin
      REDIS_URL: redis://:${REDIS_PASSWORD}@redis:6379
      JWT_SECRET: ${JWT_SECRET}
      JWT_REFRESH_SECRET: ${JWT_REFRESH_SECRET}
      ENCRYPTION_KEY: ${ENCRYPTION_KEY}
      API_RATE_LIMIT: ${API_RATE_LIMIT}
      CORS_ORIGIN: ${CORS_ORIGIN}
      AI_SERVICE_URL: http://ai-services:8000
      MONITORING_URL: http://monitoring:8080
      SMTP_HOST: ${SMTP_HOST}
      SMTP_PORT: ${SMTP_PORT}
      SMTP_USER: ${SMTP_USER}
      SMTP_PASS: ${SMTP_PASS}
      AWS_REGION: ${AWS_REGION}
      AWS_ACCESS_KEY_ID: ${AWS_ACCESS_KEY_ID}
      AWS_SECRET_ACCESS_KEY: ${AWS_SECRET_ACCESS_KEY}
      S3_BUCKET: ${S3_BUCKET}
    volumes:
      - ./logs:/app/logs
      - ./uploads:/app/uploads
    networks:
      - trade-ai-network
    depends_on:
      mongodb:
        condition: service_healthy
      redis:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:5000/api/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "5"

  # Frontend Service
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile.production
      args:
        CACHEBUST: ${CACHEBUST}
        REACT_APP_API_URL: ${REACT_APP_API_URL}
        REACT_APP_SOCKET_URL: ${REACT_APP_SOCKET_URL}
        REACT_APP_AI_API_URL: ${REACT_APP_AI_API_URL}
        REACT_APP_MONITORING_URL: ${REACT_APP_MONITORING_URL}
        NODE_ENV: production
        BUILD_DATE: ${BUILD_DATE}
        VERSION: ${VERSION}
    container_name: trade-ai-frontend-aws-prod
    restart: always
    ports:
      - "127.0.0.1:3001:80"
    networks:
      - trade-ai-network
    depends_on:
      - backend
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:80"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "5"

  # AI Services
  ai-services:
    build:
      context: ./ai-services
      dockerfile: Dockerfile.production
      args:
        BUILD_DATE: ${BUILD_DATE}
        VERSION: ${VERSION}
    container_name: trade-ai-ai-services-aws-prod
    restart: always
    ports:
      - "127.0.0.1:8000:8000"
    environment:
      - PORT=8000
      - HOST=0.0.0.0
      - MONGODB_URI=mongodb://${MONGO_USERNAME}:${MONGO_PASSWORD}@mongodb:27017/${MONGO_DATABASE}?authSource=admin
      - REDIS_URL=redis://:${REDIS_PASSWORD}@redis:6379
      - MODEL_CACHE_SIZE=${AI_MODEL_CACHE_SIZE}
      - PREDICTION_BATCH_SIZE=${AI_PREDICTION_BATCH_SIZE}
      - AWS_REGION=${AWS_REGION}
      - AWS_ACCESS_KEY_ID=${AWS_ACCESS_KEY_ID}
      - AWS_SECRET_ACCESS_KEY=${AWS_SECRET_ACCESS_KEY}
    volumes:
      - ./ai-models:/app/models
      - ./logs:/app/logs
    networks:
      - trade-ai-network
    depends_on:
      mongodb:
        condition: service_healthy
      redis:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 90s
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "5"

  # Monitoring Service
  monitoring:
    build:
      context: ./monitoring
      dockerfile: Dockerfile.production
      args:
        BUILD_DATE: ${BUILD_DATE}
        VERSION: ${VERSION}
    container_name: trade-ai-monitoring-aws-prod
    restart: always
    ports:
      - "127.0.0.1:8081:8080"
    environment:
      - PORT=8080
      - HOST=0.0.0.0
      - MONGODB_URI=mongodb://${MONGO_USERNAME}:${MONGO_PASSWORD}@mongodb:27017/${MONGO_DATABASE}?authSource=admin
      - REDIS_URL=redis://:${REDIS_PASSWORD}@redis:6379
      - BACKEND_URL=http://backend:5000
      - AI_SERVICES_URL=http://ai-services:8000
    volumes:
      - ./logs:/app/logs
    networks:
      - trade-ai-network
    depends_on:
      - backend
      - ai-services
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "5"

  # Nginx Reverse Proxy
  nginx:
    build:
      context: ./nginx
      dockerfile: Dockerfile.production
      args:
        BUILD_DATE: ${BUILD_DATE}
        VERSION: ${VERSION}
    container_name: trade-ai-nginx-aws-prod
    restart: always
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx-aws-production.conf:/etc/nginx/nginx.conf:ro
      - ./ssl:/etc/nginx/ssl:ro
      - ./nginx/html:/usr/share/nginx/html:ro
    networks:
      - trade-ai-network
    depends_on:
      - frontend
      - backend
      - ai-services
      - monitoring
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:80/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "5"

networks:
  trade-ai-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16

volumes:
  mongodb_data:
    driver: local
  mongodb_config:
    driver: local
  redis_data:
    driver: local