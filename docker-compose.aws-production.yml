version: '3.8'

services:
  # MongoDB with Production Configuration
  mongodb:
    image: mongo:5-focal
    container_name: trade-ai-mongodb-aws-prod
    restart: always
    ports:
      - "127.0.0.1:27017:27017"  # Bind to localhost only for security
    environment:
      MONGO_INITDB_ROOT_USERNAME: ${MONGO_USERNAME}
      MONGO_INITDB_ROOT_PASSWORD: ${MONGO_PASSWORD}
      MONGO_INITDB_DATABASE: ${MONGO_DATABASE}
    volumes:
      - mongodb_data:/data/db
      - mongodb_config:/data/configdb
      - ./init-mongo.js:/docker-entrypoint-initdb.d/init-mongo.js:ro
      - ./backups/mongodb:/backups
      - ./scripts/mongodb-backup.sh:/usr/local/bin/mongodb-backup.sh:ro
    networks:
      - trade-ai-network
    healthcheck:
      test: echo 'db.runCommand("ping").ok' | mongosh mongodb://${MONGO_USERNAME}:${MONGO_PASSWORD}@localhost:27017/admin --quiet
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "5"
    deploy:
      resources:
        limits:
          memory: 2G
          cpus: '1.0'
        reservations:
          memory: 1G
          cpus: '0.5'

  # Redis with Production Configuration
  redis:
    image: redis:7-alpine
    container_name: trade-ai-redis-aws-prod
    restart: always
    ports:
      - "127.0.0.1:6379:6379"  # Bind to localhost only for security
    command: redis-server --appendonly yes --requirepass ${REDIS_PASSWORD} --maxmemory 1gb --maxmemory-policy allkeys-lru --save 900 1 --save 300 10 --save 60 10000
    volumes:
      - redis_data:/data
      - ./backups/redis:/backups
      - ./scripts/redis-backup.sh:/usr/local/bin/redis-backup.sh:ro
    networks:
      - trade-ai-network
    healthcheck:
      test: ["CMD", "redis-cli", "-a", "${REDIS_PASSWORD}", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"
    deploy:
      resources:
        limits:
          memory: 1G
          cpus: '0.5'
        reservations:
          memory: 512M
          cpus: '0.25'

  # Backend API with Production Optimizations
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile.production
      args:
        NODE_ENV: production
        BUILD_DATE: ${BUILD_DATE}
        VERSION: ${VERSION}
    container_name: trade-ai-backend-aws-prod
    restart: always
    ports:
      - "127.0.0.1:5001:5000"  # Bind to localhost only, nginx will proxy
    environment:
      NODE_ENV: production
      PORT: 5000
      MONGODB_URI: mongodb://${MONGO_USERNAME}:${MONGO_PASSWORD}@mongodb:27017/${MONGO_DATABASE}?authSource=admin&retryWrites=true&w=majority
      REDIS_URL: redis://:${REDIS_PASSWORD}@redis:6379
      JWT_SECRET: ${JWT_SECRET}
      JWT_EXPIRES_IN: ${JWT_EXPIRES_IN}
      JWT_REFRESH_SECRET: ${JWT_REFRESH_SECRET}
      JWT_REFRESH_EXPIRES_IN: ${JWT_REFRESH_EXPIRES_IN}
      CORS_ORIGIN: ${CORS_ORIGIN}
      LOG_LEVEL: ${LOG_LEVEL}
      SECURITY_LOG_DIR: /app/logs/security
      SECURITY_LOG_LEVEL: ${SECURITY_LOG_LEVEL}
      RATE_LIMIT_WINDOW_MS: ${RATE_LIMIT_WINDOW_MS}
      RATE_LIMIT_MAX_REQUESTS: ${RATE_LIMIT_MAX_REQUESTS}
      SESSION_TIMEOUT: ${SESSION_TIMEOUT}
      MAX_LOGIN_ATTEMPTS: ${MAX_LOGIN_ATTEMPTS}
      LOCKOUT_TIME: ${LOCKOUT_TIME}
      # AWS Specific
      AWS_REGION: ${AWS_REGION}
      AWS_ACCESS_KEY_ID: ${AWS_ACCESS_KEY_ID}
      AWS_SECRET_ACCESS_KEY: ${AWS_SECRET_ACCESS_KEY}
      S3_BUCKET_NAME: ${S3_BUCKET_NAME}
      # Multi-tenant Configuration
      ENABLE_MULTI_TENANT: true
      DEFAULT_COMPANY_DOMAIN: gonxt.tech
      # Performance
      NODE_OPTIONS: "--max-old-space-size=2048"
      UV_THREADPOOL_SIZE: 16
    depends_on:
      mongodb:
        condition: service_healthy
      redis:
        condition: service_healthy
    volumes:
      - ./backend/uploads:/app/uploads
      - ./logs:/app/logs
      - ./backups/backend:/app/backups
      - backend_cache:/app/.cache
    networks:
      - trade-ai-network
    healthcheck:
      test: ["CMD", "node", "healthcheck.js"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "5"
    deploy:
      resources:
        limits:
          memory: 2G
          cpus: '1.0'
        reservations:
          memory: 1G
          cpus: '0.5'

  # Frontend with Production Build
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile.production
      args:
        CACHEBUST: ${CACHEBUST}
        REACT_APP_API_URL: ${REACT_APP_API_URL}
        REACT_APP_SOCKET_URL: ${REACT_APP_SOCKET_URL}
        REACT_APP_AI_API_URL: ${REACT_APP_AI_API_URL}
        REACT_APP_MONITORING_URL: ${REACT_APP_MONITORING_URL}
        NODE_ENV: production
        BUILD_DATE: ${BUILD_DATE}
        VERSION: ${VERSION}
    container_name: trade-ai-frontend-aws-prod
    restart: always
    ports:
      - "127.0.0.1:3001:80"  # Bind to localhost only, nginx will proxy
    environment:
      REACT_APP_API_URL: ${REACT_APP_API_URL}
      REACT_APP_SOCKET_URL: ${REACT_APP_SOCKET_URL}
      REACT_APP_AI_API_URL: ${REACT_APP_AI_API_URL}
      REACT_APP_MONITORING_URL: ${REACT_APP_MONITORING_URL}
      REACT_APP_VERSION: ${VERSION}
      REACT_APP_BUILD_DATE: ${BUILD_DATE}
    depends_on:
      - backend
    networks:
      - trade-ai-network
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:80/health.json || exit 0"]
      interval: 30s
      timeout: 10s
      retries: 3
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"
    deploy:
      resources:
        limits:
          memory: 512M
          cpus: '0.5'
        reservations:
          memory: 256M
          cpus: '0.25'

  # AI Services with Production Configuration
  ai-services:
    build:
      context: ./ai-services
      dockerfile: Dockerfile.production
      args:
        BUILD_DATE: ${BUILD_DATE}
        VERSION: ${VERSION}
    container_name: trade-ai-ai-services-aws-prod
    restart: always
    ports:
      - "127.0.0.1:8000:8000"  # Bind to localhost only, nginx will proxy
    environment:
      - PORT=8000
      - HOST=0.0.0.0
      - MODEL_DIR=/app/models
      - DATA_DIR=/app/data
      - LOG_LEVEL=${LOG_LEVEL}
      - MONGODB_URI=mongodb://${MONGO_USERNAME}:${MONGO_PASSWORD}@mongodb:27017/${MONGO_DATABASE}?authSource=admin
      - AI_MODEL_TYPE=${AI_MODEL_TYPE}
      - AI_MODEL_PATH=${AI_MODEL_PATH}
      - AI_USE_LOCAL_MODELS=${AI_USE_LOCAL_MODELS}
      - REDIS_URL=redis://:${REDIS_PASSWORD}@redis:6379
      - ENABLE_MULTI_TENANT=true
      # Performance
      - PYTHONUNBUFFERED=1
      - PYTHONOPTIMIZE=1
    volumes:
      - ai_services_models:/app/models
      - ai_services_data:/app/data
      - ./logs/ai-services:/app/logs
      - ai_services_cache:/app/.cache
    depends_on:
      mongodb:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - trade-ai-network
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:8000/health || exit 0"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"
    deploy:
      resources:
        limits:
          memory: 2G
          cpus: '1.0'
        reservations:
          memory: 1G
          cpus: '0.5'

  # Monitoring Service with Enhanced Features
  monitoring:
    build:
      context: ./monitoring
      dockerfile: Dockerfile.production
      args:
        BUILD_DATE: ${BUILD_DATE}
        VERSION: ${VERSION}
    container_name: trade-ai-monitoring-aws-prod
    restart: always
    ports:
      - "127.0.0.1:8081:8080"  # Bind to localhost only, nginx will proxy
    environment:
      - PORT=8080
      - HOST=0.0.0.0
      - LOG_LEVEL=${LOG_LEVEL}
      - RETENTION_DAYS=${RETENTION_DAYS}
      - SYSTEM_CHECK_INTERVAL=${SYSTEM_CHECK_INTERVAL}
      - SERVICE_CHECK_INTERVAL=${SERVICE_CHECK_INTERVAL}
      - BACKEND_URL=http://backend:5000
      - FRONTEND_URL=http://frontend:80
      - AI_SERVICES_URL=http://ai-services:8000
      - MONGODB_URI=mongodb://${MONGO_USERNAME}:${MONGO_PASSWORD}@mongodb:27017/${MONGO_DATABASE}?authSource=admin
      - REDIS_URL=redis://:${REDIS_PASSWORD}@redis:6379
      - ENABLE_ALERTS=true
      - ALERT_EMAIL=${ALERT_EMAIL}
      - SMTP_HOST=${SMTP_HOST}
      - SMTP_PORT=${SMTP_PORT}
      - SMTP_USER=${SMTP_USER}
      - SMTP_PASS=${SMTP_PASS}
    volumes:
      - monitoring_data:/app/data
      - ./logs/monitoring:/app/logs
      - monitoring_cache:/app/.cache
    depends_on:
      - backend
      - frontend
      - ai-services
      - mongodb
      - redis
    networks:
      - trade-ai-network
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:8080/health || exit 0"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"
    deploy:
      resources:
        limits:
          memory: 1G
          cpus: '0.5'
        reservations:
          memory: 512M
          cpus: '0.25'

  # Nginx Reverse Proxy with Production Configuration
  nginx:
    build:
      context: ./nginx
      dockerfile: Dockerfile.production
      args:
        BUILD_DATE: ${BUILD_DATE}
        VERSION: ${VERSION}
    container_name: trade-ai-nginx-aws-prod
    restart: always
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx-aws-production.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/conf.d:/etc/nginx/conf.d:ro
      - ./ssl:/etc/nginx/ssl:ro
      - ./logs/nginx:/var/log/nginx
      - nginx_cache:/var/cache/nginx
      - ./nginx/html:/usr/share/nginx/html:ro
    depends_on:
      - frontend
      - backend
      - ai-services
      - monitoring
    networks:
      - trade-ai-network
    healthcheck:
      test: ["CMD", "nginx", "-t"]
      interval: 30s
      timeout: 10s
      retries: 3
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "5"
    deploy:
      resources:
        limits:
          memory: 512M
          cpus: '0.5'
        reservations:
          memory: 256M
          cpus: '0.25'

  # Backup Service
  backup:
    build:
      context: ./scripts
      dockerfile: Dockerfile.backup
    container_name: trade-ai-backup-aws-prod
    restart: always
    environment:
      - BACKUP_SCHEDULE=${BACKUP_SCHEDULE}
      - BACKUP_RETENTION_DAYS=${BACKUP_RETENTION_DAYS}
      - MONGODB_URI=mongodb://${MONGO_USERNAME}:${MONGO_PASSWORD}@mongodb:27017/${MONGO_DATABASE}?authSource=admin
      - REDIS_URL=redis://:${REDIS_PASSWORD}@redis:6379
      - AWS_REGION=${AWS_REGION}
      - AWS_ACCESS_KEY_ID=${AWS_ACCESS_KEY_ID}
      - AWS_SECRET_ACCESS_KEY=${AWS_SECRET_ACCESS_KEY}
      - S3_BACKUP_BUCKET=${S3_BACKUP_BUCKET}
      - BACKUP_ENCRYPTION_KEY=${BACKUP_ENCRYPTION_KEY}
    volumes:
      - ./backups:/backups
      - mongodb_data:/data/mongodb:ro
      - redis_data:/data/redis:ro
      - ./logs/backup:/app/logs
    depends_on:
      - mongodb
      - redis
    networks:
      - trade-ai-network
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  # Log Rotation and Management Service
  logrotate:
    image: alpine:latest
    container_name: trade-ai-logrotate-aws-prod
    restart: always
    volumes:
      - ./logs:/logs
      - ./scripts/logrotate-aws.conf:/etc/logrotate.conf:ro
      - ./scripts/logrotate-aws.sh:/usr/local/bin/logrotate-aws.sh:ro
    command: >
      sh -c "
        apk add --no-cache logrotate aws-cli &&
        chmod +x /usr/local/bin/logrotate-aws.sh &&
        while true; do
          /usr/local/bin/logrotate-aws.sh
          sleep 86400
        done
      "
    environment:
      - AWS_REGION=${AWS_REGION}
      - AWS_ACCESS_KEY_ID=${AWS_ACCESS_KEY_ID}
      - AWS_SECRET_ACCESS_KEY=${AWS_SECRET_ACCESS_KEY}
      - S3_LOGS_BUCKET=${S3_LOGS_BUCKET}
    networks:
      - trade-ai-network

  # Health Check Service
  healthcheck:
    build:
      context: ./scripts
      dockerfile: Dockerfile.healthcheck
    container_name: trade-ai-healthcheck-aws-prod
    restart: always
    environment:
      - CHECK_INTERVAL=60
      - ALERT_EMAIL=${ALERT_EMAIL}
      - SMTP_HOST=${SMTP_HOST}
      - SMTP_PORT=${SMTP_PORT}
      - SMTP_USER=${SMTP_USER}
      - SMTP_PASS=${SMTP_PASS}
      - SLACK_WEBHOOK_URL=${SLACK_WEBHOOK_URL}
    volumes:
      - ./logs/healthcheck:/app/logs
    depends_on:
      - nginx
      - backend
      - frontend
      - ai-services
      - monitoring
      - mongodb
      - redis
    networks:
      - trade-ai-network
    logging:
      driver: "json-file"
      options:
        max-size: "5m"
        max-file: "3"

volumes:
  mongodb_data:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: /opt/trade-ai/data/mongodb
  mongodb_config:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: /opt/trade-ai/data/mongodb-config
  redis_data:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: /opt/trade-ai/data/redis
  ai_services_models:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: /opt/trade-ai/data/ai-models
  ai_services_data:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: /opt/trade-ai/data/ai-data
  ai_services_cache:
    driver: local
  monitoring_data:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: /opt/trade-ai/data/monitoring
  monitoring_cache:
    driver: local
  backend_cache:
    driver: local
  nginx_cache:
    driver: local

networks:
  trade-ai-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16
          gateway: 172.20.0.1
    driver_opts:
      com.docker.network.bridge.name: trade-ai-br0
      com.docker.network.bridge.enable_icc: "true"
      com.docker.network.bridge.enable_ip_masquerade: "true"
      com.docker.network.bridge.host_binding_ipv4: "0.0.0.0"